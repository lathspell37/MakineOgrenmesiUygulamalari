# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'KlasikMakineOgrenimiQT_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.




import os
import sys
from os.path import dirname, join
from PyQt5.QtWidgets import QApplication,QWidget, QFileDialog, QTableWidgetItem, QMainWindow, QMessageBox
from PyQt5.uic import loadUiType
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.neighbors import LocalOutlierFactor
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score , confusion_matrix, mean_squared_error
from sklearn.svm import SVC,SVR
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.naive_bayes import GaussianNB
from PyQt5.QtGui import QPixmap
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.model_selection import KFold


class Ui_Dialog(QtWidgets.QMainWindow):

    def openFile(self):
        path = QFileDialog.getOpenFileName(self, 'Open CSV', os.getenv('HOME'), 'CSV(*.csv)')
        oku = pd.read_csv(path[0])
        self.all_data = oku.copy()
        self.all_data = self.all_data.dropna()
        self.showData()
        self.oznitelikDoldur()

    def aykiriBaskilama(self):
        clf = LocalOutlierFactor(n_neighbors=20, contamination=0.1)
        clf.fit_predict(self.X)
        df_scores = clf.negative_outlier_factor_
        esik = np.sort(df_scores)[13]
        aykiri = df_scores > esik
        yeni = self.X[df_scores > esik]
        baski = self.X[df_scores == esik]
        aykirilar = self.X[~aykiri]

        res = aykirilar.to_records(index=False)
        res[:] = baski.to_records(index=False)
        self.X[~aykiri] = pd.DataFrame(res, index=self.X[~aykiri].index)

    def showData(self):
        try:
            numRows = self.all_data.shape[0]
            self.tableWidget.setColumnCount(len(self.all_data.columns))
            self.tableWidget.setRowCount(numRows)
            self.tableWidget.setHorizontalHeaderLabels(self.all_data.columns)

            for i in range(len(self.all_data.columns)):
                for j in range(numRows):
                    self.tableWidget.setItem(j, i, QTableWidgetItem(str(self.all_data.iat[j, i])))

            self.tableWidget.resizeColumnsToContents()
        except Exception as a:
            print(a)

    def oznitelikDoldur(self):
        self.HedefOznitelik.clear()
        for i in self.all_data.columns:
            self.HedefOznitelik.addItem(i)

    def oznitelikSec(self):
        try:
            hedef = self.HedefOznitelik.currentText()
            self.y = self.all_data[hedef]
            self.X = self.all_data.drop([hedef], axis=1)
            self.X = pd.get_dummies(self.X)
            self.aykiriBaskilama()
            QMessageBox.about(self, "Hedef Öznitelik", hedef)
        except Exception as a:
            print(a)

    def islemler(self):
        if self.StandartizasyonRadioButton.isChecked() == True:
            self.X = preprocessing.scale(self.X)
            QMessageBox.about(self, "İşlem", "Standartizasyon Tamamlandı")
        elif self.NormalizasyonRadio.isChecked() == True:
            self.X = preprocessing.normalize(self.X)
            QMessageBox.about(self, "İşlem", "Normalizasyon Tamamlandı")
        elif self.MinMaxRadio.isChecked() == True:
            scaler = preprocessing.MinMaxScaler(feature_range=(self.minSpinBox.value(), self.maxSpinBox.value()))
            scaler.fit_transform(self.X)
            QMessageBox.about(self, "İşlem", "MinMax Scale Tamamlandı")

    def trainSpotting(self):
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y,
                                                                                test_size=self.TestSizeBox.value(),
                                                                                random_state=self.RandomStateBox.value())
        QMessageBox.about(self, "İşlem", "Train " + str(self.TestSizeBox.value()) + " ve " + "Test " + str(
            (1 - self.TestSizeBox.value())) + " Hold Out Kullanarak Ayrılmıştır.")

    def truepredGrafik(self, y_pred, abc):
        fig = plt.figure()
        ax = fig.add_subplot(111)

        ax.errorbar(self.y_test, y_pred, fmt='o')
        ax.errorbar([1, self.y_test.max()], [1, self.y_test.max()])

        plt.savefig("./Grafikler/" + abc + "real_predict.png")

        self.pixmap = QPixmap("./Grafikler/" + abc + "real_predict.png")
        self.accuracyGrafikLabel.setPixmap(self.pixmap)

    def ConfusionMatrix(self, conf_m, conf_m_name):
        plt.close()
        plt.figure(figsize=(10, 3))
        sns.set(font_scale=1.2)
        ax = sns.heatmap(conf_m, annot=True, xticklabels=np.unique(self.y_test),
                         yticklabels=np.unique(self.y_test), cbar=False, cmap='inferno', linewidths=1,
                         linecolor='yellow', fmt='.0f')
        plt.yticks(rotation=0)
        plt.xlabel('Tahminler')
        plt.ylabel('Gerçekler (acıdır)')
        ax.xaxis.set_ticks_position('top')
        plt.title('Test için Confusion Matrix')
        plt.savefig("./Grafikler/" + conf_m_name + "confusion_matrix.png")

        self.pixmap = QPixmap("./Grafikler/" + conf_m_name + "confusion_matrix.png")
        self.confusionMatrixgrafikLabel.setPixmap(self.pixmap)

    def classificationSec(self):
        try:
            if self.knnRadioButton.isChecked():
                self.knnModel = KNeighborsClassifier()
                self.knnModel.fit(self.X_train,self.y_train)
                self.y_predict_knn = self.knnModel.predict(self.X_test)
                self.knnConfusionMatrix = confusion_matrix(self.y_test , self.y_predict_knn)
                self.knnAccuracy = accuracy_score(self.y_test , self.y_predict_knn)
                self.accuracyLabel.setText(str(self.knnAccuracy))
                print(self.knnConfusionMatrix)
                self.ConfusionMatrix(self.knnConfusionMatrix, "knn")
            elif self.svmRadioButton.isChecked():
                self.svmModel = SVC()
                self.svmModel.fit(self.X_train,self.y_train)
                self.y_predict_svm = self.svmModel.predict(self.X_test)
                self.svmConfusionMatrix = confusion_matrix(self.y_test, self.y_predict_svm)
                self.svmAccuracy = accuracy_score(self.y_test, self.y_predict_svm)
                self.accuracyLabel.setText(str(self.svmAccuracy))
                print(self.svmConfusionMatrix)
                self.ConfusionMatrix(self.svmConfusionMatrix, "svm")
            elif self.randomforestRadioButton.isChecked():
                self.rfcModel = RandomForestClassifier()
                self.rfcModel.fit(self.X_train, self.y_train)
                self.y_predict_rfc = self.rfcModel.predict(self.X_test)
                self.rfcConfusionMatrix = confusion_matrix(self.y_test, self.y_predict_rfc)
                self.rfcAccuracy = accuracy_score(self.y_test, self.y_predict_rfc)
                self.accuracyLabel.setText(str(self.rfcAccuracy))
                print(self.rfcConfusionMatrix)
                self.ConfusionMatrix(self.rfcConfusionMatrix, "rfc")
            elif self.naivebayesRadioButton.isChecked():
                self.naivebayesModel = GaussianNB()
                self.naivebayesModel.fit(self.X_train, self.y_train)
                self.y_predict_naivebayes = self.naivebayesModel.predict(self.X_test)
                self.naivebayesConfusionMatrix = confusion_matrix(self.y_test, self.y_predict_naivebayes)
                self.naivebayesAccuracy = accuracy_score(self.y_test, self.y_predict_naivebayes)
                self.accuracyLabel.setText(str(self.naivebayesAccuracy))
                print(str(self.naivebayesConfusionMatrix))
                self.ConfusionMatrix(self.naivebayesConfusionMatrix, "naivebayes")
        except Exception as a:
            print(a)


    def regresyonSec(self):
        try:
            if self.lineerRegrRadio.isChecked():
                self.lineerRegrModel = LinearRegression()
                self.lineerRegrModel.fit(self.X_train, self.y_train)
                self.y_predict_lineer = self.lineerRegrModel.predict(self.X_test)
                self.lineerMSE = mean_squared_error(self.y_test, self.y_predict_lineer)
                self.mseLabel.setText(str(np.sqrt(self.lineerMSE)))
                self.truepredGrafik(self.y_predict_lineer, "lineer")

            elif self.lojistikRegrRadio.isChecked():
                self.lojistikregrModel = LogisticRegression()
                self.lojistikregrModel.fit(self.X_train, self.y_train)
                self.y_predict_lojistik = self.lojistikregrModel.predict(self.X_test)
                self.lojistikMSE = mean_squared_error(self.y_test, self.y_predict_lojistik)
                self.mseLabel.setText(str(np.sqrt(self.lojistikMSE)))
                self.truepredGrafik(self.y_predict_lojistik, "lojistik")
            elif self.randomforestRegrRadio.isChecked():
                self.rfRegrModel = RandomForestRegressor()
                self.rfRegrModel.fit(self.X_train, self.y_train)
                self.y_predict_random = self.rfRegrModel.predict(self.X_test)
                self.randomforestMSE = mean_squared_error(self.y_test, self.y_predict_random)
                self.mseLabel.setText(str(np.sqrt(self.randomforestMSE)))
                self.truepredGrafik(self.y_predict_random, "random forest")
            elif self.svmRegrRadio.isChecked():
                self.svmRegrModel = SVR()
                self.svmRegrModel.fit(self.X_train, self.y_train)
                self.y_predict_svm = self.svmRegrModel.predict(self.X_test)
                self.svmMSE = mean_squared_error(self.y_test, self.y_predict_svm)
                self.mseLabel.setText(str(np.sqrt(self.svmMSE)))
                self.truepredGrafik(self.y_predict_svm, "random forest")

        except Exception as a:
            print(a)

    def Kfold(self, model_, X, y, n_fold, isReggression):

        kf = KFold(n_splits=n_fold)
        X = np.array(X)

        scores = []

        for train_index, test_index in kf.split(X):

            X_train, X_test = X[train_index], X[test_index]
            y_train, y_test = y[train_index], y[test_index]

            model = model_
            model = model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
            if isReggression:
                mse = mean_squared_error(y_test, y_pred)
                scores.append(mse)
            else:
                acc_score = accuracy_score(y_test, y_pred)
                scores.append(acc_score)

        return np.mean(scores)


    def kFoldRegr(self):
        try:
            if self.lineerRegrRadio.isChecked():
                self.lineerRegrModel = LinearRegression()
                self.LineerkFoldMSE = self.Kfold(model_ = self.lineerRegrModel, X = self.X, y = self.y, n_fold = self.kFoldRegrSpinBox.value(), isReggression = 1)
                self.mseLabel.setText(str(np.sqrt(self.LineerkFoldMSE)))

            elif self.lojistikRegrRadio.isChecked():
                self.lojistikregrModel = LogisticRegression()
                self.LojistikkFoldMSE = self.Kfold(model_ = self.lojistikregrModel, X = self.X, y = self.y, n_fold = self.kFoldRegrSpinBox.value(), isReggression = 1)
                self.mseLabel.setText(str(np.sqrt(self.LojistikkFoldMSE)))

            elif self.randomforestRegrRadio.isChecked():
                self.rfRegrModel = RandomForestRegressor()
                self.RandomForestkFoldMSE = self.Kfold(model_ = self.rfRegrModel, X = self.X, y = self.y, n_fold = self.kFoldRegrSpinBox.value(), isReggression = 1)
                self.mseLabel.setText(str(np.sqrt(self.RandomForestkFoldMSE)))

            elif self.svmRegrRadio.isChecked():
                self.svmRegrModel = SVR()
                self.svmkFoldMSE = self.Kfold(model_ = self.svmRegrModel, X = self.X, y = self.y, n_fold = self.kFoldRegrSpinBox.value(), isReggression = 1)
                self.mseLabel.setText(str(np.sqrt(self.svmkFoldMSE)))


        except Exception as a:
            print(a)

    def kFoldClass(self):
        try:
            if self.knnRadioButton.isChecked():
                self.knnModel = KNeighborsClassifier()
                self.knnkFoldAccuracy = self.Kfold(model_ = self.knnModel, X = self.X, y = self.y, n_fold = self.kFoldClassSpinBox.value(), isReggression = 0)
                self.accuracyLabel.setText(str(self.knnkFoldAccuracy))

            elif self.svmRadioButton.isChecked():
                self.svmModel = SVC()
                self.svmkFoldAccuracy = self.Kfold(model_ = self.svmModel, X = self.X, y = self.y, n_fold = self.kFoldClassSpinBox.value(), isReggression = 0)
                self.accuracyLabel.setText(str(self.svmkFoldAccuracy))

            elif self.randomforestRadioButton.isChecked():
                self.rfcModel = RandomForestClassifier()
                self.rfckFoldAccuracy = self.Kfold(model_ = self.rfcModel, X = self.X, y = self.y, n_fold = self.kFoldClassSpinBox.value(), isReggression = 0)
                self.accuracyLabel.setText(str(self.rfckFoldAccuracy))

            elif self.naivebayesRadioButton.isChecked():
                self.naivebayesModel = GaussianNB()
                self.naivebayeskFoldAccuracy = self.Kfold(model_ = self.naivebayesModel, X = self.X, y = self.y, n_fold = self.kFoldClassSpinBox.value(), isReggression = 0)
                self.accuracyLabel.setText(str(self.naivebayeskFoldAccuracy))

        except Exception as a:
            print(a)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(775, 409)
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 971, 581))
        self.tabWidget.setObjectName("tabWidget")
        self.VeriOnislemeTab = QtWidgets.QWidget()
        self.VeriOnislemeTab.setObjectName("VeriOnislemeTab")
        self.VeriSecButton = QtWidgets.QPushButton(self.VeriOnislemeTab)
        self.VeriSecButton.setGeometry(QtCore.QRect(20, 0, 101, 21))
        self.VeriSecButton.setObjectName("VeriSecButton")
        self.StandartGrup = QtWidgets.QGroupBox(self.VeriOnislemeTab)
        self.StandartGrup.setGeometry(QtCore.QRect(170, 0, 221, 101))
        self.StandartGrup.setTitle("")
        self.StandartGrup.setObjectName("StandartGrup")
        self.StandartizasyonRadioButton = QtWidgets.QRadioButton(self.StandartGrup)
        self.StandartizasyonRadioButton.setGeometry(QtCore.QRect(20, 10, 101, 17))
        self.StandartizasyonRadioButton.setObjectName("StandartizasyonRadioButton")
        self.NormalizasyonRadio = QtWidgets.QRadioButton(self.StandartGrup)
        self.NormalizasyonRadio.setGeometry(QtCore.QRect(20, 30, 101, 17))
        self.NormalizasyonRadio.setObjectName("NormalizasyonRadio")
        self.MinMaxRadio = QtWidgets.QRadioButton(self.StandartGrup)
        self.MinMaxRadio.setGeometry(QtCore.QRect(20, 50, 131, 17))
        self.MinMaxRadio.setObjectName("MinMaxRadio")
        self.StandartButton = QtWidgets.QPushButton(self.StandartGrup)
        self.StandartButton.setGeometry(QtCore.QRect(170, 0, 51, 41))
        self.StandartButton.setObjectName("StandartButton")
        self.minSpinBox = QtWidgets.QSpinBox(self.StandartGrup)
        self.minSpinBox.setGeometry(QtCore.QRect(50, 70, 42, 22))
        self.minSpinBox.setObjectName("minSpinBox")
        self.maxSpinBox = QtWidgets.QSpinBox(self.StandartGrup)
        self.maxSpinBox.setGeometry(QtCore.QRect(130, 70, 42, 22))
        self.maxSpinBox.setObjectName("maxSpinBox")
        self.label_5 = QtWidgets.QLabel(self.StandartGrup)
        self.label_5.setGeometry(QtCore.QRect(30, 70, 21, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.StandartGrup)
        self.label_6.setGeometry(QtCore.QRect(50, 100, 21, 16))
        self.label_6.setObjectName("label_6")
        self.label_8 = QtWidgets.QLabel(self.StandartGrup)
        self.label_8.setGeometry(QtCore.QRect(110, 70, 21, 16))
        self.label_8.setObjectName("label_8")
        self.TestGrup = QtWidgets.QGroupBox(self.VeriOnislemeTab)
        self.TestGrup.setGeometry(QtCore.QRect(400, 20, 231, 80))
        self.TestGrup.setObjectName("TestGrup")
        self.RandomStateBox = QtWidgets.QSpinBox(self.TestGrup)
        self.RandomStateBox.setGeometry(QtCore.QRect(100, 20, 61, 22))
        self.RandomStateBox.setObjectName("RandomStateBox")
        self.TestSizeBox = QtWidgets.QDoubleSpinBox(self.TestGrup)
        self.TestSizeBox.setGeometry(QtCore.QRect(100, 50, 62, 22))
        self.TestSizeBox.setMinimum(0.1)
        self.TestSizeBox.setMaximum(1.0)
        self.TestSizeBox.setObjectName("TestSizeBox")
        self.label_2 = QtWidgets.QLabel(self.TestGrup)
        self.label_2.setGeometry(QtCore.QRect(10, 20, 81, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.TestGrup)
        self.label_3.setGeometry(QtCore.QRect(10, 50, 47, 13))
        self.label_3.setObjectName("label_3")
        self.TestSizeButton = QtWidgets.QPushButton(self.TestGrup)
        self.TestSizeButton.setGeometry(QtCore.QRect(170, 20, 51, 41))
        self.TestSizeButton.setObjectName("TestSizeButton")
        self.tableWidget = QtWidgets.QTableWidget(self.VeriOnislemeTab)
        self.tableWidget.setGeometry(QtCore.QRect(0, 110, 771, 271))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.HedefGroup = QtWidgets.QGroupBox(self.VeriOnislemeTab)
        self.HedefGroup.setGeometry(QtCore.QRect(0, 20, 151, 81))
        self.HedefGroup.setTitle("")
        self.HedefGroup.setObjectName("HedefGroup")
        self.HedefOznitelik = QtWidgets.QComboBox(self.HedefGroup)
        self.HedefOznitelik.setGeometry(QtCore.QRect(20, 30, 111, 22))
        self.HedefOznitelik.setObjectName("HedefOznitelik")
        self.label = QtWidgets.QLabel(self.HedefGroup)
        self.label.setGeometry(QtCore.QRect(20, 10, 121, 16))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.HedefGroup)
        self.pushButton.setGeometry(QtCore.QRect(40, 55, 75, 21))
        self.pushButton.setObjectName("pushButton")
        self.tabWidget.addTab(self.VeriOnislemeTab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.classificationGroupBox = QtWidgets.QGroupBox(self.tab_2)
        self.classificationGroupBox.setGeometry(QtCore.QRect(10, 10, 181, 181))
        self.classificationGroupBox.setObjectName("classificationGroupBox")
        self.knnRadioButton = QtWidgets.QRadioButton(self.classificationGroupBox)
        self.knnRadioButton.setGeometry(QtCore.QRect(10, 40, 82, 17))
        self.knnRadioButton.setObjectName("knnRadioButton")
        self.naivebayesRadioButton = QtWidgets.QRadioButton(self.classificationGroupBox)
        self.naivebayesRadioButton.setGeometry(QtCore.QRect(10, 60, 82, 17))
        self.naivebayesRadioButton.setObjectName("naivebayesRadioButton")
        self.randomforestRadioButton = QtWidgets.QRadioButton(self.classificationGroupBox)
        self.randomforestRadioButton.setGeometry(QtCore.QRect(10, 80, 91, 17))
        self.randomforestRadioButton.setObjectName("randomforestRadioButton")
        self.svmRadioButton = QtWidgets.QRadioButton(self.classificationGroupBox)
        self.svmRadioButton.setGeometry(QtCore.QRect(10, 20, 82, 17))
        self.svmRadioButton.setObjectName("svmRadioButton")
        self.classificationSecButton = QtWidgets.QPushButton(self.classificationGroupBox)
        self.classificationSecButton.setGeometry(QtCore.QRect(120, 10, 51, 41))
        self.classificationSecButton.setObjectName("classificationSecButton")
        self.kFoldclassGroupBox = QtWidgets.QGroupBox(self.classificationGroupBox)
        self.kFoldclassGroupBox.setGeometry(QtCore.QRect(10, 100, 131, 80))
        self.kFoldclassGroupBox.setObjectName("kFoldclassGroupBox")
        self.kFoldClassButton = QtWidgets.QPushButton(self.kFoldclassGroupBox)
        self.kFoldClassButton.setGeometry(QtCore.QRect(80, 20, 41, 41))
        self.kFoldClassButton.setObjectName("kFoldClassButton")
        self.kFoldClassSpinBox = QtWidgets.QSpinBox(self.kFoldclassGroupBox)
        self.kFoldClassSpinBox.setGeometry(QtCore.QRect(20, 30, 42, 22))
        self.kFoldClassSpinBox.setObjectName("kFoldClassSpinBox")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 200, 181, 181))
        self.groupBox_2.setObjectName("groupBox_2")
        self.regresyonSecButton = QtWidgets.QPushButton(self.groupBox_2)
        self.regresyonSecButton.setGeometry(QtCore.QRect(120, 10, 51, 41))
        self.regresyonSecButton.setObjectName("regresyonSecButton")
        self.lineerRegrRadio = QtWidgets.QRadioButton(self.groupBox_2)
        self.lineerRegrRadio.setGeometry(QtCore.QRect(10, 20, 82, 17))
        self.lineerRegrRadio.setObjectName("lineerRegrRadio")
        self.lojistikRegrRadio = QtWidgets.QRadioButton(self.groupBox_2)
        self.lojistikRegrRadio.setGeometry(QtCore.QRect(10, 40, 82, 17))
        self.lojistikRegrRadio.setObjectName("lojistikRegrRadio")
        self.svmRegrRadio = QtWidgets.QRadioButton(self.groupBox_2)
        self.svmRegrRadio.setGeometry(QtCore.QRect(10, 60, 82, 17))
        self.svmRegrRadio.setObjectName("svmRegrRadio")
        self.randomforestRegrRadio = QtWidgets.QRadioButton(self.groupBox_2)
        self.randomforestRegrRadio.setGeometry(QtCore.QRect(10, 80, 101, 17))
        self.randomforestRegrRadio.setObjectName("randomforestRegrRadio")
        self.kFoldRegrGroupBox = QtWidgets.QGroupBox(self.groupBox_2)
        self.kFoldRegrGroupBox.setGeometry(QtCore.QRect(20, 100, 131, 80))
        self.kFoldRegrGroupBox.setObjectName("kFoldRegrGroupBox")
        self.kFoldRegrButton = QtWidgets.QPushButton(self.kFoldRegrGroupBox)
        self.kFoldRegrButton.setGeometry(QtCore.QRect(80, 20, 41, 41))
        self.kFoldRegrButton.setObjectName("kFoldRegrButton")
        self.kFoldRegrSpinBox = QtWidgets.QSpinBox(self.kFoldRegrGroupBox)
        self.kFoldRegrSpinBox.setGeometry(QtCore.QRect(20, 30, 42, 22))
        self.kFoldRegrSpinBox.setObjectName("kFoldRegrSpinBox")
        self.grafikGroupBox = QtWidgets.QGroupBox(self.tab_2)
        self.grafikGroupBox.setGeometry(QtCore.QRect(210, 10, 551, 341))
        self.grafikGroupBox.setObjectName("grafikGroupBox")
        self.accuracyGrafikLabel = QtWidgets.QLabel(self.grafikGroupBox)
        self.accuracyGrafikLabel.setGeometry(QtCore.QRect(10, 20, 181, 181))
        self.accuracyGrafikLabel.setText("")
        self.accuracyGrafikLabel.setScaledContents(True)
        self.accuracyGrafikLabel.setObjectName("accuracyGrafikLabel")
        self.rocGrafikLabel = QtWidgets.QLabel(self.grafikGroupBox)
        self.rocGrafikLabel.setGeometry(QtCore.QRect(180, 160, 191, 181))
        self.rocGrafikLabel.setText("")
        self.rocGrafikLabel.setScaledContents(True)
        self.rocGrafikLabel.setObjectName("rocGrafikLabel")
        self.confusionMatrixgrafikLabel = QtWidgets.QLabel(self.grafikGroupBox)
        self.confusionMatrixgrafikLabel.setGeometry(QtCore.QRect(346, 10, 191, 181))
        self.confusionMatrixgrafikLabel.setText("")
        self.confusionMatrixgrafikLabel.setScaledContents(True)
        self.confusionMatrixgrafikLabel.setObjectName("confusionMatrixgrafikLabel")
        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setGeometry(QtCore.QRect(250, 360, 47, 13))
        self.label_4.setObjectName("label_4")
        self.accuracyLabel = QtWidgets.QLabel(self.tab_2)
        self.accuracyLabel.setGeometry(QtCore.QRect(360, 360, 47, 13))
        self.accuracyLabel.setObjectName("accuracyLabel")
        self.mseLabel = QtWidgets.QLabel(self.tab_2)
        self.mseLabel.setGeometry(QtCore.QRect(700, 360, 47, 13))
        self.mseLabel.setObjectName("mseLabel")
        self.label_7 = QtWidgets.QLabel(self.tab_2)
        self.label_7.setGeometry(QtCore.QRect(590, 360, 47, 13))
        self.label_7.setObjectName("label_7")
        self.tabWidget.addTab(self.tab_2, "")

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.VeriSecButton.setText(_translate("Dialog", "Veri Seti Seç"))
        self.StandartizasyonRadioButton.setText(_translate("Dialog", "Standartizasyon"))
        self.NormalizasyonRadio.setText(_translate("Dialog", "Normalizasyon"))
        self.MinMaxRadio.setText(_translate("Dialog", "MinMax Normalizasyon"))
        self.StandartButton.setText(_translate("Dialog", "Seç"))
        self.label_5.setText(_translate("Dialog", "Alt"))
        self.label_6.setText(_translate("Dialog", "Alt"))
        self.label_8.setText(_translate("Dialog", "Üst"))
        self.TestGrup.setTitle(_translate("Dialog", "Hold Out"))
        self.label_2.setText(_translate("Dialog", "Random State"))
        self.label_3.setText(_translate("Dialog", "Test Size"))
        self.TestSizeButton.setText(_translate("Dialog", "Seç"))
        self.label.setText(_translate("Dialog", "Hedef Özniteliği Seçiniz."))
        self.pushButton.setText(_translate("Dialog", "Seç"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.VeriOnislemeTab), _translate("Dialog", "Veri Önişleme"))
        self.classificationGroupBox.setTitle(_translate("Dialog", "Classification"))
        self.knnRadioButton.setText(_translate("Dialog", "KNN"))
        self.naivebayesRadioButton.setText(_translate("Dialog", "Naive Bayes"))
        self.randomforestRadioButton.setText(_translate("Dialog", "Random Forest"))
        self.svmRadioButton.setText(_translate("Dialog", "SVM"))
        self.classificationSecButton.setText(_translate("Dialog", "Seç"))
        self.kFoldclassGroupBox.setTitle(_translate("Dialog", "K Fold"))
        self.kFoldClassButton.setText(_translate("Dialog", "Seç"))
        self.groupBox_2.setTitle(_translate("Dialog", "Regresyon"))
        self.regresyonSecButton.setText(_translate("Dialog", "Seç"))
        self.lineerRegrRadio.setText(_translate("Dialog", "Lineer"))
        self.lojistikRegrRadio.setText(_translate("Dialog", "Lojistik"))
        self.svmRegrRadio.setText(_translate("Dialog", "SVM"))
        self.randomforestRegrRadio.setText(_translate("Dialog", "Random Forest"))
        self.kFoldRegrGroupBox.setTitle(_translate("Dialog", "K Fold"))
        self.kFoldRegrButton.setText(_translate("Dialog", "Seç"))
        self.grafikGroupBox.setTitle(_translate("Dialog", "Grafik"))
        self.label_4.setText(_translate("Dialog", "Accuracy"))
        self.accuracyLabel.setText(_translate("Dialog", "TextLabel"))
        self.mseLabel.setText(_translate("Dialog", "TextLabel"))
        self.label_7.setText(_translate("Dialog", "MSE"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "Klasik Makine Öğrenimi"))

        self.VeriSecButton.clicked.connect(self.openFile)
        self.pushButton.clicked.connect(self.oznitelikSec)
        self.StandartButton.clicked.connect(self.islemler)
        self.TestSizeButton.clicked.connect(self.trainSpotting)
        self.classificationSecButton.clicked.connect(self.classificationSec)
        self.regresyonSecButton.clicked.connect(self.regresyonSec)
        self.kFoldRegrButton.clicked.connect(self.kFoldRegr)
        self.kFoldClassButton.clicked.connect(self.kFoldClass)